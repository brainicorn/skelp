// Code generated by go-bindata.
// sources:
// template/schema/github_com-brainicorn-skelp-template-Template.json
// template/schema/schema_accessor.go
// DO NOT EDIT!

package skelplate

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateSchemaGithub_comBrainicornSkelpTemplateTemplateJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\x41\x6f\xdb\x3c\x0c\x86\xef\xfd\x15\x84\xda\x63\x1d\x7f\x87\xef\x94\xdb\xd0\x5d\x06\x6c\xd8\xb0\x75\xbb\x0c\xc3\x40\xcb\x74\xac\x4e\x96\x34\x8a\x5e\x1b\x0c\xf9\xef\x83\xac\x38\x55\xd0\x6c\x8d\x7b\x49\x6c\xda\xef\xcb\x87\x94\x28\xff\xbe\x00\x50\x57\x51\xf7\x34\xa0\x5a\x83\xea\x45\xc2\xba\xae\xef\xa2\x77\x55\x8e\xae\x3c\x6f\xea\x96\xb1\x93\xea\xbf\xff\xeb\x1c\xbb\x54\xd7\x49\x67\xda\x42\xb2\x31\xd2\x8f\xcd\x4a\xfb\xa1\x6e\x18\x8d\x33\xda\xb3\xab\xe3\x0f\xb2\xa1\x16\x1a\x82\x45\xa1\xfa\x76\x7f\x91\xf5\xb2\x0d\x94\x1c\x7c\x73\x47\x5a\x72\xac\xa5\xce\x38\x23\xc6\xbb\xa8\xd6\x90\xf0\x00\x54\xf6\xfe\xae\xfd\x50\x3d\x7a\x57\x93\x77\x35\x7b\x57\x37\xde\x75\x66\x33\x32\x36\x96\x0e\xd2\xd3\x59\x72\xdc\xc8\xf4\xa2\x2a\x85\x60\x22\xa0\x83\xfc\x2e\x48\x8f\x02\x1a\x1d\xd0\x43\x60\x8a\x11\xb4\x1f\x82\xa5\x07\xe0\xd1\x52\x84\xce\x33\x68\x0c\x32\xb2\x71\x1b\x30\x2e\x8c\xb2\x7a\xf4\x0f\xec\x03\xb1\x18\x8a\x05\x0d\x80\x62\xfa\x39\x1a\xa6\xf6\x28\x5a\x70\x36\xde\x5b\x42\xa7\x0e\xcf\x76\x17\xe5\x7f\xfa\xdd\x4d\xad\x3a\x91\x40\xe1\x28\xbd\xe7\x53\xe5\x47\x49\x94\x27\xca\x9f\xd7\xe4\xd5\x24\x4d\x0d\x90\x9e\x20\x1b\x81\xef\xa6\xbb\xb9\xc9\xab\x4c\xb5\xcb\x2e\x4a\x33\xa1\x1c\x55\x72\x7e\xba\x9b\xac\x9d\xf3\xb5\x28\x74\x94\x0a\xee\x31\xc2\x3e\x41\xd1\xd5\xce\xf3\x80\x92\x8c\x92\xa2\x12\x33\xd0\x31\xd3\xe0\x5b\xd3\x99\x17\x42\xbd\xdb\x8b\xff\x4d\x65\x31\x0a\xcc\x79\x96\xb0\x31\x05\x1f\x8d\x78\xde\xbe\x88\xee\xf3\xc7\xb7\x33\xd8\xc8\xf6\x99\xb5\x89\x66\xd1\x10\x7c\xf2\x03\xbd\x71\x42\xdc\xa1\x9e\xa7\xc0\xcc\xf7\x45\x8d\xd8\xb6\xd3\x74\xa2\xfd\x50\x6e\x3f\xe1\x91\x8e\xd2\xff\x42\x36\x69\xa0\xe2\x22\x8a\xb9\xd2\x2f\xb3\x1a\x7a\x6f\xdb\x5c\xf2\xc1\x11\xd0\xb5\x29\x62\x18\xf4\x3c\xba\x09\x69\x9a\xc7\xc0\x5e\x53\x8c\x69\x20\xb1\x68\xcd\x73\xfc\xc5\x7c\xfe\x05\xf2\x14\xe6\x6b\x14\xbc\xdd\x86\x84\xc4\xfb\x7d\x92\xef\xac\xf5\xf7\xd4\x4e\x40\x8f\xd8\xc6\x1d\x80\xe2\xaa\xf4\x45\xb7\x7d\xdf\xa9\x35\x7c\x2d\x8e\x83\xf2\x68\x78\xba\x47\x8a\x87\xbb\xeb\xe7\x55\x6e\x1c\x1a\xe2\xa5\xaa\xb4\xfc\x9b\xe5\xb2\x27\xe7\xd7\x79\x32\x64\xc6\xed\xb9\xa2\x2b\xa6\xd4\x30\x75\x59\x17\xdf\x8b\x7a\xf9\x67\xa2\x4c\x77\xb8\xfe\xf6\xf4\xbc\xbd\xd8\xfd\x09\x00\x00\xff\xff\x74\xd5\x86\xa1\x29\x07\x00\x00")

func templateSchemaGithub_comBrainicornSkelpTemplateTemplateJsonBytes() ([]byte, error) {
	return bindataRead(
		_templateSchemaGithub_comBrainicornSkelpTemplateTemplateJson,
		"template/schema/github_com-brainicorn-skelp-template-Template.json",
	)
}

func templateSchemaGithub_comBrainicornSkelpTemplateTemplateJson() (*asset, error) {
	bytes, err := templateSchemaGithub_comBrainicornSkelpTemplateTemplateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/schema/github_com-brainicorn-skelp-template-Template.json", size: 1833, mode: os.FileMode(436), modTime: time.Unix(1493134001, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSchemaSchema_accessorGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x41\x6f\xd4\x3c\x10\x3d\x37\xbf\xc2\x72\x7b\xf8\x3e\x29\xd9\x70\xe0\x14\x89\x03\x14\x09\x21\x81\x40\xb4\x70\x41\x88\xce\x3a\x93\x8d\xdb\xc4\x63\xc6\x13\xda\x55\x95\xff\x8e\x9c\x6c\x76\xb3\x2d\x2d\x0b\x07\xc4\x29\xf2\xe4\xf9\xbd\xe7\xf1\xf8\x79\x30\x57\xb0\x42\x15\x4c\x8d\x2d\x24\x89\x21\x17\x44\xfd\x97\x1c\xe5\xb9\x7a\x65\xa5\xee\x96\xa7\xd4\xbe\x60\xb0\xce\x1a\x62\x77\x76\x85\x8d\x3f\xc7\xd6\x37\x20\x38\x7d\x95\x0d\x0a\xd4\x65\x20\x97\x8d\x34\x0a\x8c\xc1\x10\x88\x93\xa3\x83\x39\x9e\xa9\x8b\x5b\x7d\x32\xee\xd7\x85\xae\x45\x7c\x91\xe7\x33\xd2\x05\xf1\x2a\x2f\x19\x2a\xc9\x9e\x3c\xcd\xc7\xda\xb1\x4e\xb5\x2d\x77\xf0\xd5\xa0\xb6\x30\xd4\xe6\xcb\xad\x5e\x1e\xa2\x60\x2e\x1b\xa5\x7c\x92\xd4\xa9\x96\xb5\x47\x5d\x68\x5a\x5e\xa2\x11\x9d\xea\x12\x2b\xeb\xac\x58\x72\x41\x17\xb7\x7a\xa4\xfb\x6a\xa8\xcd\x76\x74\xd9\x40\x97\x4d\x74\xd9\x29\xb9\xca\xae\x3a\x86\x65\x83\x71\xd3\x5d\x4e\xb1\x12\x7f\xe8\x39\x6e\xe8\x98\x53\x23\x46\x49\x0d\xa2\x0c\x38\x85\x37\x9e\x31\x04\x65\xa8\xf5\x0d\xde\x28\xee\x1a\x0c\xaa\x22\x56\x06\xbc\x74\x6c\xdd\x4a\x59\xe7\x3b\x59\xe8\x54\x7b\x26\x8f\x2c\x16\x07\xab\x8c\xdf\x3a\xcb\x58\xce\x1c\x2c\x89\x1a\x04\xa7\xfb\xbe\xef\xef\xc2\xa1\x93\x9a\x78\x06\x0e\x12\xd9\x67\x76\xa7\x2e\x3d\x1f\x90\xd1\xb0\xd4\xa8\xc6\x7d\x8a\xaa\x61\x35\xf5\x60\xa1\xfb\x54\x1b\x46\x90\x3d\x03\x0f\x72\x9e\x8e\xd0\x89\xb4\x8c\xf7\x3f\xe7\x53\xd7\x10\xd4\x86\x2f\x1e\xb5\x22\x6e\x41\x74\xa1\x23\x32\x13\xdb\x62\x14\x6c\xa9\xb4\x95\x3d\x4c\xf1\xed\x06\xfb\xb8\x64\x03\x41\xd4\x44\xfb\xb0\x30\xa3\xa7\x60\x85\x78\x7d\x88\xf4\xc7\x0f\x6f\x26\xd5\x8e\x9b\x9f\xb6\x2e\xd8\xc7\x06\xe7\x8c\x5a\x7c\xed\x04\xb9\x02\x33\x4d\x8e\x9d\xd6\xd1\x25\x94\xe5\x30\xb3\xd0\xbc\x9f\x5d\xb2\x70\x87\x7d\xaa\xbf\x03\xdb\x38\x72\xe1\x31\x89\xc9\xeb\xa7\x09\xac\x6a\x6a\xca\xd1\xf4\x96\x40\x81\x2b\x63\xc5\xb2\x32\xd3\x2c\x47\xd9\x61\x40\x3d\x53\x7c\xf2\x71\x42\x61\x76\xb8\x87\xcc\xfd\xda\xca\x4b\x10\x38\x5f\xfb\x28\xcb\x9b\xab\x1a\x57\x4d\x43\xd7\x58\x0e\xa2\x3b\x6b\xd6\x6d\x45\xc3\xa0\xea\xd6\xef\x2a\x5d\x7c\xbe\x7b\x3d\x7d\xba\xad\xb8\xae\x5d\x22\xcf\x2b\xb1\xa9\xab\xfd\xd2\xf6\x0d\xed\x4a\xc0\x0c\xeb\xa1\x70\xc2\x58\xe9\x42\x1f\xe7\xb3\xd8\xc8\x7f\x3f\x33\xfa\x2f\xf1\x85\x5e\x24\x07\x65\xee\xbd\x14\xf9\xc3\xdc\xdd\xe3\xf9\x7b\xd9\xbb\x77\xf0\xfb\xf9\xfb\x2f\x64\xe5\x45\x92\xfc\x9f\xfc\x08\x00\x00\xff\xff\xb4\xa4\x29\xea\x17\x07\x00\x00")

func templateSchemaSchema_accessorGoBytes() ([]byte, error) {
	return bindataRead(
		_templateSchemaSchema_accessorGo,
		"template/schema/schema_accessor.go",
	)
}

func templateSchemaSchema_accessorGo() (*asset, error) {
	bytes, err := templateSchemaSchema_accessorGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/schema/schema_accessor.go", size: 1815, mode: os.FileMode(436), modTime: time.Unix(1493134001, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/schema/github_com-brainicorn-skelp-template-Template.json": templateSchemaGithub_comBrainicornSkelpTemplateTemplateJson,
	"template/schema/schema_accessor.go":                                 templateSchemaSchema_accessorGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"schema": &bintree{nil, map[string]*bintree{
			"github_com-brainicorn-skelp-template-Template.json": &bintree{templateSchemaGithub_comBrainicornSkelpTemplateTemplateJson, map[string]*bintree{}},
			"schema_accessor.go":                                 &bintree{templateSchemaSchema_accessorGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
